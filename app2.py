import streamlit as st
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
import statsmodels.api as sm
from statsmodels.formula.api import ols
from scipy import stats
from statsmodels.stats.outliers_influence import variance_inflation_factor
from statsmodels.stats.diagnostic import het_breuschpagan
from sklearn.metrics import mean_squared_error, mean_absolute_error
import warnings

# Ignorar avisos que podem poluir o dashboard
warnings.filterwarnings("ignore")
st.set_page_config(page_title="An√°lise Imobili√°ria - Ames", layout="wide")

# --- CABE√áALHO FIXO COM CSS ---
header_html = """
<style>
    #app-header {
        position: fixed;
        top: 0;
        left: 0;
        right: 0;
        background-color: #0f1116; 
        color: #fafafa;          
        padding: 10px 25px;
        z-index: 999;             
        border-bottom: 1px solid #31333f;
        text-align: center;
    }
    #app-header h2 {
        margin: 0;
        font-size: 26px;
        font-weight: 600;
    }
    #app-header p {
        margin: 5px 0 0 0;
        font-size: 16px;
        color: #a3a3a3; 
    }
    .main .block-container {
        padding-top: 7rem; 
    }
</style>

<div id="app-header">
    <h2>üè° An√°lise de Dados Imobili√°rios: Ames, Iowa</h2>
    <p>Integrantes: Pedro Russo e Daniel Vianna</p>
</div>
"""
st.markdown(header_html, unsafe_allow_html=True)

# --- CARREGAMENTO E CACHE DOS DADOS ---
@st.cache_data
def load_data():
    """Carrega e faz um pr√©-processamento leve nos dados."""
    df_loaded = pd.read_csv("AmesHousing.csv")
    df_loaded.columns = df_loaded.columns.str.replace(' ', '')
    
    numeric_cols_to_impute = ['MasVnrArea', 'BsmtFinSF1', 'TotalBsmtSF', 'GarageCars', 'OverallQual']
    for col in numeric_cols_to_impute:
        if col in df_loaded.columns:
            df_loaded[col].fillna(df_loaded[col].median(), inplace=True)
            
    categorical_cols_to_impute = ['BsmtQual', 'FireplaceQu', 'GarageType', 'MSZoning', 'HouseStyle', 'BldgType']
    for col in categorical_cols_to_impute:
         if col in df_loaded.columns:
            df_loaded[col].fillna(df_loaded[col].mode()[0], inplace=True)
    return df_loaded

df_original = load_data()

# --- BARRA LATERAL DE NAVEGA√á√ÉO E FILTROS ---
st.sidebar.title("Navega√ß√£o")
aba = st.sidebar.radio("Selecione a An√°lise:", ["üìä Vis√£o Geral", "üìà Etapa I ‚Äì ANOVA", "üìâ Etapa II ‚Äì Regress√£o", "üìò Sobre o Projeto"])

st.sidebar.markdown("---")
st.sidebar.header("Filtros Gerais")
st.sidebar.markdown("Filtre os dados para refinar as an√°lises em todas as abas.")

if 'OverallQual' in df_original.columns and not df_original['OverallQual'].empty:
    overall_qual_options = sorted(df_original['OverallQual'].unique())
    default_overall_qual = overall_qual_options
else:
    overall_qual_options = [0]
    default_overall_qual = [0]

qualidade_geral = st.sidebar.multiselect(
    'Filtre por Qualidade Geral do Im√≥vel:',
    options=overall_qual_options,
    default=default_overall_qual
)

if 'YearBuilt' in df_original.columns and not df_original['YearBuilt'].empty:
    ano_min_orig, ano_max_orig = int(df_original['YearBuilt'].min()), int(df_original['YearBuilt'].max())
else:
    ano_min_orig, ano_max_orig = 1900, 2020

ano_range = st.sidebar.slider(
    'Filtre por Ano de Constru√ß√£o:',
    min_value=ano_min_orig,
    max_value=ano_max_orig,
    value=(ano_min_orig, ano_max_orig)
)

df_filtered = df_original.copy()
if 'OverallQual' in df_filtered.columns:
    df_filtered = df_filtered[df_filtered['OverallQual'].isin(qualidade_geral)]
if 'YearBuilt' in df_filtered.columns:
    df_filtered = df_filtered[
        (df_filtered['YearBuilt'] >= ano_range[0]) &
        (df_filtered['YearBuilt'] <= ano_range[1])
    ]


# --- ABA 1: VIS√ÉO GERAL ---
if aba == "üìä Vis√£o Geral":
    st.header("üìä Vis√£o Geral dos Dados de Im√≥veis")
    st.markdown(f"Exibindo *{df_filtered.shape[0]}* de *{df_original.shape[0]}* im√≥veis ap√≥s a aplica√ß√£o dos filtros.")
    
    if not df_filtered.empty:
        col1, col2 = st.columns(2)
        with col1:
            st.subheader("Distribui√ß√£o do Pre√ßo de Venda (SalePrice)")
            fig, ax = plt.subplots()
            sns.histplot(df_filtered['SalePrice'], kde=True, ax=ax)
            ax.set_title("Distribui√ß√£o do Pre√ßo de Venda")
            ax.set_xlabel("Pre√ßo de Venda ($)")
            ax.set_ylabel("Frequ√™ncia")
            st.pyplot(fig)

        with col2:
            st.subheader("Pre√ßo de Venda vs. Outra Vari√°vel")
            numeric_cols_scatter = [col for col in df_filtered.select_dtypes(include=np.number).columns if col not in ['PID', 'Id', 'SalePrice']]
            if numeric_cols_scatter:
                default_scatter_var = 'GrLivArea' if 'GrLivArea' in numeric_cols_scatter else numeric_cols_scatter[0]
                
                x_axis_var = st.selectbox("Escolha a vari√°vel para o eixo X:", options=numeric_cols_scatter, index=numeric_cols_scatter.index(default_scatter_var))
                
                fig, ax = plt.subplots()
                sns.scatterplot(data=df_filtered, x=x_axis_var, y='SalePrice', alpha=0.5, ax=ax)
                ax.set_title(f"Pre√ßo de Venda vs. {x_axis_var}")
                ax.set_xlabel(x_axis_var)
                ax.set_ylabel("Pre√ßo de Venda ($)")
                st.pyplot(fig)
            else:
                st.info("Nenhuma vari√°vel num√©rica dispon√≠vel para o gr√°fico de dispers√£o.")
            
        st.subheader("Amostra dos Dados")
        st.dataframe(df_filtered.head())
    else:
        st.warning("Nenhum dado dispon√≠vel ap√≥s a aplica√ß√£o dos filtros.")


# --- ABA 2: ANOVA ---
elif aba == "üìà Etapa I ‚Äì ANOVA":
    st.header("üìà An√°lise de Vari√¢ncia (ANOVA)")
    st.markdown("""
    *Objetivo:* Verificar se existe uma diferen√ßa estatisticamente significativa no pre√ßo m√©dio de venda (SalePrice) 
    entre diferentes categorias de uma vari√°vel escolhida. O usu√°rio deve selecionar de 2 a 3 vari√°veis sequencialmente para an√°lise.
    """)

    cat_cols_anova = [col for col in df_filtered.select_dtypes(include=['object', 'category']).columns if df_filtered[col].nunique() < 10 and df_filtered[col].nunique() > 1]
    
    if not cat_cols_anova:
        st.warning("N√£o h√° vari√°veis categ√≥ricas adequadas para ANOVA ap√≥s os filtros aplicados (precisa > 1 e < 10 categorias √∫nicas).")
    else:
        default_anova_var = 'BldgType' if 'BldgType' in cat_cols_anova else cat_cols_anova[0]
        var_cat = st.selectbox(
            "*1. Escolha a vari√°vel categ√≥rica para an√°lise:*",
            options=cat_cols_anova,
            index=cat_cols_anova.index(default_anova_var),
            help="A ANOVA de fator √∫nico compara o pre√ßo m√©dio entre os grupos de UMA vari√°vel por vez."
        )

        if var_cat and not df_filtered.empty:
            st.markdown("---")
            st.subheader(f"An√°lise de 'SalePrice' por '{var_cat}'")

            st.write("*Visualiza√ß√£o da Distribui√ß√£o:*")
            fig, ax = plt.subplots(figsize=(12, 6))
            sns.boxplot(data=df_filtered, x=var_cat, y='SalePrice', ax=ax)
            ax.set_title(f"Distribui√ß√£o do Pre√ßo de Venda por {var_cat}")
            ax.set_xlabel(var_cat)
            ax.set_ylabel("Pre√ßo de Venda ($)")
            plt.xticks(rotation=45)
            st.pyplot(fig)
            
            st.markdown("---")
            st.subheader("2. Verifica√ß√£o dos Pressupostos da ANOVA")

            df_anova_current = df_filtered[[var_cat, 'SalePrice']].dropna()

            if df_anova_current.empty or df_anova_current[var_cat].nunique() < 2:
                st.error(f"N√£o h√° dados suficientes ou categorias suficientes para '{var_cat}' ap√≥s remover NaNs para realizar a ANOVA.")
            else:
                formula = f"SalePrice ~ C({var_cat})"
                try:
                    model_anova = ols(formula, data=df_anova_current).fit()
                    residuals = model_anova.resid
                except Exception as e:
                    st.error(f"N√£o foi poss√≠vel ajustar o modelo para os res√≠duos. Erro: {e}")
                    st.stop()
                
                st.markdown("*a) Normalidade dos Res√≠duos*")
                if len(residuals) > 2:
                    shapiro_test = stats.shapiro(residuals)
                    p_valor_shapiro = shapiro_test.pvalue
                    if p_valor_shapiro < 0.05:
                        st.warning(f"*Pressuposto violado:* Os res√≠duos *n√£o* seguem uma distribui√ß√£o normal (p-valor do teste de Shapiro-Wilk = {p_valor_shapiro:.4f}).")
                    else:
                        st.success(f"*Pressuposto atendido:* Os res√≠duos parecem seguir uma distribui√ß√£o normal (p-valor do teste de Shapiro-Wilk = {p_valor_shapiro:.4f}).")
                    
                    fig_qq = sm.qqplot(residuals, line='s', fit=True)
                    plt.title("Gr√°fico Q-Q dos Res√≠duos")
                    st.pyplot(fig_qq)
                else:
                    st.warning("N√£o h√° res√≠duos suficientes para o teste de Shapiro-Wilk.")
                    p_valor_shapiro = 0

                st.markdown("*b) Homocedasticidade*")
                groups = [df_anova_current['SalePrice'][df_anova_current[var_cat] == g] for g in df_anova_current[var_cat].unique()]
                groups_for_levene = [g for g in groups if len(g) > 1]
                
                if len(groups_for_levene) > 1:
                    levene_test = stats.levene(*groups_for_levene)
                    p_valor_levene = levene_test.pvalue
                    if p_valor_levene < 0.05:
                        st.warning(f"*Pressuposto violado:* As vari√¢ncias *n√£o* s√£o homog√™neas entre os grupos (p-valor do teste de Levene = {p_valor_levene:.4f}).")
                    else:
                        st.success(f"*Pressuposto atendido:* As vari√¢ncias s√£o homog√™neas entre os grupos (p-valor do teste de Levene = {p_valor_levene:.4f}).")
                else:
                    st.warning("N√£o h√° grupos suficientes para realizar o teste de Levene.")
                    p_valor_levene = 0

                st.markdown("---")
                st.subheader("3. Resultados do Teste Estat√≠stico e Interpreta√ß√£o")
                
                if p_valor_shapiro >= 0.05 and p_valor_levene >= 0.05:
                    st.info("*Teste Aplicado: ANOVA* (pois os pressupostos foram atendidos).")
                    anova_table = sm.stats.anova_lm(model_anova, typ=2)
                    st.write("Tabela ANOVA:")
                    st.dataframe(anova_table)
                    p_valor_final = anova_table.iloc[0]['PR(>F)']
                    if p_valor_final < 0.05:
                        st.success(f"*Conclus√£o (ANOVA):* Existe uma diferen√ßa estatisticamente significativa nos pre√ßos m√©dios de venda entre as diferentes categorias de '{var_cat}' (p-valor = {p_valor_final:.4f}).")
                    else:
                        st.warning(f"*Conclus√£o (ANOVA):* N√£o h√° evid√™ncia de uma diferen√ßa estatisticamente significativa para '{var_cat}' (p-valor = {p_valor_final:.4f}).")

                else:
                    st.info("*Teste Aplicado: Kruskal-Wallis* (alternativa n√£o param√©trica, pois um ou mais pressupostos da ANOVA foram violados).")
                    if len(groups) > 1 :
                        kruskal_test = stats.kruskal(*groups)
                        p_valor_kruskal = kruskal_test.pvalue
                        st.write(f"*Estat√≠stica H (Kruskal-Wallis):* {kruskal_test.statistic:.4f}")
                        st.write(f"*P-valor:* {p_valor_kruskal:.4f}")
                        if p_valor_kruskal < 0.05:
                            st.success(f"*Conclus√£o (Kruskal-Wallis):* Existe uma diferen√ßa estatisticamente significativa nas distribui√ß√µes de pre√ßo para '{var_cat}' (p-valor = {p_valor_kruskal:.4f}).")
                        else:
                            st.warning(f"*Conclus√£o (Kruskal-Wallis):* N√£o h√° evid√™ncia de uma diferen√ßa significativa para '{var_cat}' (p-valor = {p_valor_kruskal:.4f}).")
                    else:
                        st.error("N√£o foi poss√≠vel realizar o teste de Kruskal-Wallis.")
                
                st.markdown(f"*Orienta√ß√£o para Corretores/Investidores:* Se '{var_cat}' mostrou impacto significativo, foque nas categorias de maior valor.")
        elif df_filtered.empty:
            st.warning("Nenhum dado dispon√≠vel ap√≥s a aplica√ß√£o dos filtros para realizar a ANOVA.")


# --- ABA 3: REGRESS√ÉO LINEAR ---
elif aba == "üìâ Etapa II ‚Äì Regress√£o":
    st.header("üìâ Modelagem Preditiva com Regress√£o Linear")
    st.markdown("""
    *Objetivo:* Construir um modelo para prever o SalePrice com base em m√∫ltiplas caracter√≠sticas do im√≥vel.
    """)

    if df_filtered.empty:
        st.warning("Nenhum dado dispon√≠vel ap√≥s a aplica√ß√£o dos filtros para a Regress√£o Linear.")
    else:
        st.subheader("1. Sele√ß√£o de Vari√°veis e Transforma√ß√£o")
        
        num_cols_reg = df_filtered.select_dtypes(include=np.number).columns.tolist()
        num_cols_reg = [col for col in num_cols_reg if col not in ['PID', 'SalePrice', 'Id']]

        cat_cols_reg = [col for col in df_filtered.select_dtypes(include=['object', 'category']).columns if df_filtered[col].nunique() < 20 and df_filtered[col].nunique() > 1]
        
        desired_cat_defaults = ['MSZoning', 'HouseStyle', 'BldgType']
        actual_cat_defaults = [col for col in desired_cat_defaults if col in cat_cols_reg]
        
        desired_num_defaults = ['GrLivArea', 'TotalBsmtSF', 'YearBuilt', 'OverallQual']
        actual_num_defaults = [col for col in desired_num_defaults if col in num_cols_reg]

        col1_reg, col2_reg = st.columns(2)
        with col1_reg:
            vars_cont = st.multiselect(
                "*Escolha vari√°veis cont√≠nuas (num√©ricas):*",
                options=num_cols_reg,
                default=actual_num_defaults
            )
        with col2_reg:
            vars_cat_reg = st.multiselect(
                "*Escolha vari√°veis categ√≥ricas:*",
                options=cat_cols_reg,
                default=actual_cat_defaults
            )
            
        log_transform = st.checkbox("Aplicar transforma√ß√£o logar√≠tmica em SalePrice e nas vari√°veis cont√≠nuas? (Modelo Log-Log)", value=True)

        if len(vars_cont) >= 1 and len(vars_cat_reg) >= 1:
            st.markdown("---")

            st.subheader("2. An√°lise Visual da Linearidade")
            st.markdown("Abaixo est√£o os gr√°ficos de dispers√£o para cada vari√°vel cont√≠nua selecionada versus o SalePrice. Isso ajuda a verificar visualmente a premissa de linearidade.")
            
            num_plots = len(vars_cont)
            cols_per_row = 3
            plot_cols = st.columns(cols_per_row)
            
            for i, var in enumerate(vars_cont):
                with plot_cols[i % cols_per_row]:
                    fig_reg, ax_reg = plt.subplots()
                    sns.regplot(data=df_filtered, x=var, y='SalePrice', ax=ax_reg, line_kws={"color": "red"}, scatter_kws={'alpha': 0.3})
                    ax_reg.set_title(f"SalePrice vs. {var}", fontsize=10)
                    ax_reg.set_xlabel(var, fontsize=8)
                    ax_reg.set_ylabel("SalePrice", fontsize=8)
                    st.pyplot(fig_reg)
            
            st.markdown("---")
            st.subheader("3. Ajuste do Modelo e Resultados")
            
            # Prepara√ß√£o dos dados
            cols_for_model = ['SalePrice'] + vars_cont + vars_cat_reg
            df_model = df_filtered[cols_for_model].copy().dropna()
            
            y = df_model['SalePrice']
            X_vars = df_model[vars_cont + vars_cat_reg]

            if log_transform:
                y = np.log1p(y)
                for col in vars_cont:
                    if pd.api.types.is_numeric_dtype(X_vars[col]):
                        if (X_vars[col] >= 0).all():
                            X_vars[col] = np.log1p(X_vars[col])
                        else:
                            st.warning(f"Vari√°vel {col} n√£o transformada com log1p pois cont√©m valores negativos.")

            X_vars = pd.get_dummies(X_vars, columns=vars_cat_reg, drop_first=True, dtype=float)
            X_vars = sm.add_constant(X_vars)

            # ===================== IN√çCIO DA CORRE√á√ÉO (VERIFICA√á√ÉO DE DADOS) =====================
            num_observations = X_vars.shape[0]
            num_predictors = X_vars.shape[1]

            if num_observations <= num_predictors:
                st.error(f"Dados insuficientes para o modelo. Ap√≥s o preparo, h√° {num_observations} linhas e {num_predictors} preditores. O n√∫mero de linhas deve ser maior que o n√∫mero de preditores. Tente usar menos vari√°veis ou filtros menos restritivos.")
            else:
                try:
                    model_reg = sm.OLS(y, X_vars).fit()
                    
                    st.write("*Resumo do Modelo (Statsmodels OLS):*")
                    st.text(model_reg.summary())
                
                    st.markdown("---")
                    st.subheader("4. M√©tricas de Desempenho do Modelo")
                    y_pred = model_reg.predict(X_vars)
                    
                    if log_transform:
                        y_true_orig = np.expm1(y)
                        y_pred_orig = np.expm1(y_pred)
                        y_pred_orig = np.nan_to_num(y_pred_orig, nan=np.nanmedian(y_pred_orig), posinf=np.nanmax(y_true_orig[np.isfinite(y_true_orig)]))
                    else:
                        y_true_orig = y
                        y_pred_orig = y_pred

                    r2_adj = model_reg.rsquared_adj
                    rmse = np.sqrt(mean_squared_error(y_true_orig, y_pred_orig))
                    mae = mean_absolute_error(y_true_orig, y_pred_orig)
                    
                    m1, m2, m3 = st.columns(3)
                    m1.metric(label="R¬≤ Ajustado", value=f"{r2_adj:.4f}")
                    m2.metric(label="RMSE (Erro M√©dio Quadr√°tico)", value=f"${rmse:,.2f}")
                    m3.metric(label="MAE (Erro M√©dio Absoluto)", value=f"${mae:,.2f}")
                    st.markdown(f"*Discuss√£o do Ajuste:* O modelo explica aproximadamente *{r2_adj:.1%}* da vari√¢ncia no pre√ßo de venda. O MAE indica que, em m√©dia, as previs√µes do modelo (na escala original) erram em *${mae:,.2f}*.")

                    st.markdown("---")
                    st.subheader("5. Diagn√≥stico dos Pressupostos do Modelo")
                    residuals_reg = model_reg.resid

                    diag1, diag2 = st.columns(2)
                    with diag1:
                        st.markdown("*a) Linearidade e Homocedasticidade (Visual)*")
                        fig_res_fit, ax_res_fit = plt.subplots()
                        sns.scatterplot(x=model_reg.fittedvalues, y=residuals_reg, ax=ax_res_fit, alpha=0.5)
                        ax_res_fit.axhline(0, color='red', linestyle='--')
                        ax_res_fit.set_xlabel("Valores Ajustados")
                        ax_res_fit.set_ylabel("Res√≠duos")
                        ax_res_fit.set_title("Res√≠duos vs. Valores Ajustados")
                        st.pyplot(fig_res_fit)
                        st.caption("Ideal: Pontos aleatoriamente dispersos em torno da linha 0.")

                        st.markdown("*b) Normalidade dos Res√≠duos*")
                        if len(residuals_reg) > 2:
                            shapiro_reg_test = stats.shapiro(residuals_reg)
                            if shapiro_reg_test.pvalue < 0.05:
                                st.warning(f"P-valor (Shapiro-Wilk): {shapiro_reg_test.pvalue:.4f}. Res√≠duos podem n√£o ser normais.")
                            else:
                                st.success(f"P-valor (Shapiro-Wilk): {shapiro_reg_test.pvalue:.4f}. Res√≠duos parecem normais.")
                            fig_qq_reg = sm.qqplot(residuals_reg, line='s', fit=True)
                            plt.title("Q-Q Plot dos Res√≠duos (Regress√£o)")
                            st.pyplot(fig_qq_reg)
                        else:
                             st.warning("N√£o h√° res√≠duos suficientes para o teste de Shapiro-Wilk.")

                    with diag2:
                        st.markdown("*c) Homocedasticidade (Teste Quantitativo)*")
                        try:
                            bp_test = het_breuschpagan(residuals_reg, model_reg.model.exog)
                            if bp_test[1] < 0.05:
                                st.warning(f"P-valor (Breusch-Pagan): {bp_test[1]:.4f}. H√° evid√™ncia de heterocedasticidade.")
                            else:
                                st.success(f"P-valor (Breusch-Pagan): {bp_test[1]:.4f}. N√£o h√° evid√™ncia de heterocedasticidade.")
                        except Exception as e_bp:
                            st.warning(f"N√£o foi poss√≠vel rodar o teste de Breusch-Pagan: {e_bp}")
                        
                        st.markdown("*d) Multicolinearidade (VIF)*")
                        X_vif = X_vars.drop('const', axis=1, errors='ignore')
                        if not X_vif.empty:
                            vif_data = pd.DataFrame()
                            vif_data["Vari√°vel"] = X_vif.columns
                            vif_data["VIF"] = [variance_inflation_factor(X_vif.values, i) for i in range(X_vif.shape[1])]
                            st.dataframe(vif_data[vif_data['VIF'] > 0].style.apply(
                                lambda x: ['background-color: #FF7F7F' if v > 5 else '' for v in x], subset=['VIF']))
                            st.caption("VIF > 5 pode indicar multicolinearidade.")
                        else:
                            st.info("Nenhuma vari√°vel para calcular VIF.")

                    st.markdown("---")
                    st.subheader("6. Interpreta√ß√£o dos Coeficientes e Recomenda√ß√µes Pr√°ticas")
                    coef_df = pd.DataFrame({'Coeficiente': model_reg.params, 'p-valor': model_reg.pvalues}).reset_index().rename(columns={'index': 'Vari√°vel'})
                    
                    coef_significativos = coef_df[(coef_df['p-valor'] < 0.05) & (coef_df['Vari√°vel'] != 'const')]
                    
                    if not coef_significativos.empty:
                        st.markdown("*Recomenda√ß√µes e Insights (baseado em vari√°veis com p-valor < 0.05):*")
                        for _, row in coef_significativos.iterrows():
                            var, coef_val = row['Vari√°vel'], row['Coeficiente']
                            original_cat_var_name = next((cat_var for cat_var in vars_cat_reg if cat_var in var), None)

                            if log_transform:
                                impacto_desc = "aumenta" if coef_val > 0 else "reduz"
                                if original_cat_var_name:
                                    st.markdown(f"‚Ä¢ Ser da categoria *'{var.replace(original_cat_var_name + '_', '')}'* *{impacto_desc}* o pre√ßo em *{abs(coef_val):.2%}*.")
                                elif var in vars_cont:
                                    st.markdown(f"‚Ä¢ Um aumento de 1% em *'{var}'* *{impacto_desc}* o pre√ßo em *{abs(coef_val):.2%}*.")
                            else:
                                impacto_desc = "aumenta" if coef_val > 0 else "reduz"
                                if original_cat_var_name:
                                    st.markdown(f"‚Ä¢ Ser da categoria *'{var.replace(original_cat_var_name + '_', '')}'* *{impacto_desc}* o pre√ßo em *${abs(coef_val):,.0f}*.")
                                elif var in vars_cont:
                                    st.markdown(f"‚Ä¢ Um aumento de uma unidade em *'{var}'* *{impacto_desc}* o pre√ßo em *${abs(coef_val):,.0f}*.")
                        st.caption("Interpreta√ß√µes s√£o ceteris paribus (mantendo outras vari√°veis constantes).")
                    else:
                        st.warning("Nenhuma vari√°vel selecionada apresentou impacto estatisticamente significativo.")
                
                except Exception as e_reg:
                    st.error(f"Erro ao ajustar o modelo de regress√£o: {e_reg}")
            # ===================== FIM DA CORRE√á√ÉO (VERIFICA√á√ÉO DE DADOS) =====================

        else:
            st.warning("Por favor, selecione pelo menos uma vari√°vel cont√≠nua e uma categ√≥rica para a an√°lise de regress√£o.")


# --- ABA 4: SOBRE O PROJETO ---
elif aba == "üìò Sobre o Projeto":
    st.header("üìò Sobre o Projeto e Autoria")
    st.markdown("""
    Este dashboard interativo foi desenvolvido como parte da disciplina de Sistemas de Informa√ß√µes em Engenharia de Produ√ß√£o, com o objetivo de analisar os fatores que influenciam o pre√ßo de im√≥veis na cidade de Ames, Iowa, utilizando t√©cnicas de ANOVA e Regress√£o Linear M√∫ltipla.
    
    *Autores:* Pedro Russo e Daniel Vianna
    """)
    
    st.markdown("---")
    st.subheader("üìå Funcionalidades e Requisitos Atendidos")
    st.markdown("""
    - ‚úîÔ∏è *An√°lise Explorat√≥ria e Comparativa com ANOVA (Etapa I)*
    - ‚úîÔ∏è *Modelagem Preditiva com Regress√£o Linear (Etapa II)*
    - ‚úîÔ∏è *B√¥nus de Inova√ß√£o*: Dashboard interativo, filtros, gr√°ficos e interpreta√ß√µes.
    """)