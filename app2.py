import streamlit as st
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
import statsmodels.api as sm
from statsmodels.formula.api import ols
from scipy import stats
from statsmodels.stats.outliers_influence import variance_inflation_factor
from statsmodels.stats.diagnostic import het_breuschpagan
from sklearn.metrics import mean_squared_error, mean_absolute_error
import warnings

# Ignorar avisos que podem poluir o dashboard
warnings.filterwarnings("ignore")
st.set_page_config(page_title="An√°lise Imobili√°ria - Ames", layout="wide")


# Injeta HTML e CSS para criar um cabe√ßalho fixo no topo da p√°gina
header_html = """
<style>
    /* Estilo do container do cabe√ßalho */
    #app-header {
        position: fixed;
        top: 0;
        left: 0;
        right: 0;
        background-color: #0f1116; /* Cor de fundo escura, similar ao tema do Streamlit */
        color: #fafafa;            /* Cor do texto clara */
        padding: 10px 25px;
        z-index: 999;              /* Garante que o cabe√ßalho fique sobre os outros elementos */
        border-bottom: 1px solid #31333f;
        text-align: center;
    }
    /* Estilo do t√≠tulo dentro do cabe√ßalho */
    #app-header h2 {
        margin: 0;
        font-size: 26px;
        font-weight: 600;
    }
    /* Estilo do par√°grafo com os nomes */
    #app-header p {
        margin: 5px 0 0 0;
        font-size: 16px;
        color: #a3a3a3; /* Cor mais suave para o subt√≠tulo */
    }
    /* Adiciona um espa√ßo no topo da p√°gina para o conte√∫do principal n√£o ficar escondido atr√°s do cabe√ßalho */
    .main .block-container {
        padding-top: 7rem; 
    }
</style>

<div id="app-header">
    <h2>üè° An√°lise de Dados Imobili√°rios: Ames, Iowa</h2>
    <p>Integrantes: Pedro Russo e Daniel Vianna</p>
</div>
"""
st.markdown(header_html, unsafe_allow_html=True)

# st.title("...")
# st.markdown("...")

# --- CARREGAMENTO E CACHE DOS DADOS ---
@st.cache_data
def load_data():
    """Carrega e faz um pr√©-processamento leve nos dados."""
    df = pd.read_csv("AmesHousing.csv")
    # Remover espa√ßos nos nomes das colunas para facilitar o uso
    df.columns = df.columns.str.replace(' ', '')
    # Corrigir valores ausentes em colunas-chave que ser√£o usadas
    # (Estrat√©gia simples: para vari√°veis num√©ricas, usar mediana; para categ√≥ricas, usar moda)
    for col in ['MasVnrArea', 'BsmtFinSF1', 'TotalBsmtSF', 'GarageCars', 'OverallQual']:
        if col in df.columns:
            df[col].fillna(df[col].median(), inplace=True)
    for col in ['BsmtQual', 'FireplaceQu', 'GarageType', 'MSZoning', 'HouseStyle']:
         if col in df.columns:
            df[col].fillna(df[col].mode()[0], inplace=True)
    return df

df_original = load_data()

# --- BARRA LATERAL DE NAVEGA√á√ÉO E FILTROS ---
st.sidebar.title("Navega√ß√£o")
aba = st.sidebar.radio("Selecione a An√°lise:", ["üìä Vis√£o Geral", "üìà Etapa I ‚Äì ANOVA", "üìâ Etapa II ‚Äì Regress√£o", "üìò Sobre o Projeto"])

st.sidebar.markdown("---")
st.sidebar.header("Filtros Gerais")
st.sidebar.markdown("Filtre os dados para refinar as an√°lises em todas as abas.")

# Filtro por Qualidade Geral (OverallQual)
qualidade_geral = st.sidebar.multiselect(
    'Filtre por Qualidade Geral do Im√≥vel:',
    options=sorted(df_original['OverallQual'].unique()),
    default=sorted(df_original['OverallQual'].unique())
)

# Filtro por Ano de Constru√ß√£o (YearBuilt)
ano_min, ano_max = int(df_original['YearBuilt'].min()), int(df_original['YearBuilt'].max())
ano_range = st.sidebar.slider(
    'Filtre por Ano de Constru√ß√£o:',
    min_value=ano_min,
    max_value=ano_max,
    value=(ano_min, ano_max)
)

# Aplicar filtros ao DataFrame
df = df_original[
    (df_original['OverallQual'].isin(qualidade_geral)) &
    (df_original['YearBuilt'] >= ano_range[0]) &
    (df_original['YearBuilt'] <= ano_range[1])
].copy()


# --- ABA 1: VIS√ÉO GERAL ---
if aba == "üìä Vis√£o Geral":
    st.header("üìä Vis√£o Geral dos Dados de Im√≥veis")
    st.markdown(f"Exibindo *{df.shape[0]}* de *{df_original.shape[0]}* im√≥veis ap√≥s a aplica√ß√£o dos filtros.")
    
    col1, col2 = st.columns(2)
    with col1:
        st.subheader("Distribui√ß√£o do Pre√ßo de Venda (SalePrice)")
        fig, ax = plt.subplots()
        sns.histplot(df['SalePrice'], kde=True, ax=ax)
        ax.set_title("Distribui√ß√£o do Pre√ßo de Venda")
        ax.set_xlabel("Pre√ßo de Venda ($)")
        ax.set_ylabel("Frequ√™ncia")
        st.pyplot(fig)

    with col2:
        st.subheader("Pre√ßo de Venda vs. √Årea Constru√≠da")
        fig, ax = plt.subplots()
        sns.scatterplot(data=df, x='GrLivArea', y='SalePrice', alpha=0.5, ax=ax)
        ax.set_title("Pre√ßo de Venda vs. √Årea de Estar (GrLivArea)")
        ax.set_xlabel("√Årea de Estar (P√©s Quadrados)")
        ax.set_ylabel("Pre√ßo de Venda ($)")
        st.pyplot(fig)
        
    st.subheader("Amostra dos Dados")
    st.dataframe(df.head())


# --- ABA 2: ANOVA ---
elif aba == "üìà Etapa I ‚Äì ANOVA":
    st.header("üìà An√°lise de Vari√¢ncia (ANOVA)")
    st.markdown("""
    *Objetivo:* Verificar se existe uma diferen√ßa estatisticamente significativa no pre√ßo m√©dio de venda (SalePrice) 
    entre diferentes categorias de uma vari√°vel escolhida.
    """)

    # Sele√ß√£o de vari√°veis
    cat_cols = [col for col in df.select_dtypes(include=['object', 'category']).columns if df[col].nunique() < 10]
    var_cat = st.selectbox(
        "*1. Escolha a vari√°vel categ√≥rica para an√°lise:*",
        options=cat_cols,
        index=cat_cols.index('BldgType') if 'BldgType' in cat_cols else 0,
        help="A ANOVA de fator √∫nico compara o pre√ßo m√©dio entre os grupos de UMA vari√°vel por vez."
    )

    if var_cat:
        st.markdown("---")
        st.subheader(f"An√°lise de 'SalePrice' por '{var_cat}'")

        # Visualiza√ß√£o: Boxplot
        st.write("*Visualiza√ß√£o da Distribui√ß√£o:*")
        fig, ax = plt.subplots(figsize=(12, 6))
        sns.boxplot(data=df, x=var_cat, y='SalePrice', ax=ax)
        ax.set_title(f"Distribui√ß√£o do Pre√ßo de Venda por {var_cat}")
        ax.set_xlabel(var_cat)
        ax.set_ylabel("Pre√ßo de Venda ($)")
        plt.xticks(rotation=45)
        st.pyplot(fig)
        
        st.markdown("---")
        st.subheader("2. Verifica√ß√£o dos Pressupostos da ANOVA")

        formula = f"SalePrice ~ C({var_cat})"
        try:
            model_anova = ols(formula, data=df.dropna(subset=[var_cat, 'SalePrice'])).fit()
            residuals = model_anova.resid
        except Exception as e:
            st.error(f"N√£o foi poss√≠vel ajustar o modelo para os res√≠duos. Erro: {e}")
            st.stop()
            
        st.markdown("*a) Normalidade dos Res√≠duos*")
        shapiro_test = stats.shapiro(residuals)
        p_valor_shapiro = shapiro_test.pvalue
        if p_valor_shapiro < 0.05:
            st.warning(f"*Pressuposto violado:* Os res√≠duos *n√£o* seguem uma distribui√ß√£o normal (p-valor do teste de Shapiro-Wilk = {p_valor_shapiro:.4f}).")
        else:
            st.success(f"*Pressuposto atendido:* Os res√≠duos parecem seguir uma distribui√ß√£o normal (p-valor do teste de Shapiro-Wilk = {p_valor_shapiro:.4f}).")
        
        fig = sm.qqplot(residuals, line='s', fit=True)
        plt.title("Gr√°fico Q-Q dos Res√≠duos")
        st.pyplot(fig)

        st.markdown("*b) Homocedasticidade*")
        df_anova_clean = df.dropna(subset=[var_cat, 'SalePrice'])
        groups = [df_anova_clean['SalePrice'][df_anova_clean[var_cat] == g] for g in df_anova_clean[var_cat].unique()]
        groups_for_levene = [g for g in groups if len(g) > 1]
        if len(groups_for_levene) > 1:
            levene_test = stats.levene(*groups_for_levene)
            p_valor_levene = levene_test.pvalue
            if p_valor_levene < 0.05:
                st.warning(f"*Pressuposto violado:* As vari√¢ncias *n√£o* s√£o homog√™neas entre os grupos (p-valor do teste de Levene = {p_valor_levene:.4f}).")
            else:
                st.success(f"*Pressuposto atendido:* As vari√¢ncias s√£o homog√™neas entre os grupos (p-valor do teste de Levene = {p_valor_levene:.4f}).")
        else:
            st.error("N√£o h√° grupos suficientes para realizar o teste de Levene.")

        st.markdown("---")
        st.subheader("3. Resultados do Teste Estat√≠stico")
        
        if p_valor_shapiro >= 0.05 and p_valor_levene >= 0.05:
            st.info("*Teste Aplicado: ANOVA* (pois os pressupostos foram atendidos).")
            anova_table = sm.stats.anova_lm(model_anova, typ=2)
            st.write(anova_table)
            p_valor_final = anova_table.iloc[0]['PR(>F)']
            if p_valor_final < 0.05:
                st.success(f"*Conclus√£o:* Existe uma diferen√ßa estatisticamente significativa nos pre√ßos m√©dios de venda entre as diferentes categorias de '{var_cat}' (p-valor = {p_valor_final:.4f}).")
            else:
                st.warning(f"*Conclus√£o:* N√£o h√° evid√™ncia de uma diferen√ßa significativa nos pre√ßos m√©dios de venda para '{var_cat}' (p-valor = {p_valor_final:.4f}).")

        else:
            st.info("*Teste Aplicado: Kruskal-Wallis* (alternativa n√£o param√©trica, pois um ou mais pressupostos da ANOVA foram violados).")
            kruskal_test = stats.kruskal(*groups)
            p_valor_kruskal = kruskal_test.pvalue
            st.write(f"*Estat√≠stica H:* {kruskal_test.statistic:.4f}")
            st.write(f"*P-valor:* {p_valor_kruskal:.4f}")
            if p_valor_kruskal < 0.05:
                st.success(f"*Conclus√£o:* Existe uma diferen√ßa estatisticamente significativa nas distribui√ß√µes de pre√ßo de venda entre as diferentes categorias de '{var_cat}' (p-valor = {p_valor_kruskal:.4f}).")
            else:
                st.warning(f"*Conclus√£o:* N√£o h√° evid√™ncia de uma diferen√ßa significativa nas distribui√ß√µes de pre√ßo para '{var_cat}' (p-valor = {p_valor_kruskal:.4f}).")
        
        st.markdown("---")
        st.subheader("üí° Insights e Recomenda√ß√µes (ANOVA)")
        st.markdown(f"A an√°lise da vari√°vel *'{var_cat}'* indica que ela *{'tem' if ('p_valor_final' in locals() and p_valor_final < 0.05) or ('p_valor_kruskal' in locals() and p_valor_kruskal < 0.05) else 'n√£o tem'}* um impacto estatisticamente significativo no pre√ßo do im√≥vel.")

# --- ABA 3: REGRESS√ÉO LINEAR ---
elif aba == "üìâ Etapa II ‚Äì Regress√£o":
    st.header("üìâ Modelagem Preditiva com Regress√£o Linear")
    st.markdown("""
    *Objetivo:* Construir um modelo para prever o SalePrice com base em m√∫ltiplas caracter√≠sticas do im√≥vel.
    """)

    st.subheader("1. Sele√ß√£o de Vari√°veis e Transforma√ß√£o")
    
    num_cols = df.select_dtypes(include=np.number).columns.tolist()
    cat_cols_reg = [col for col in df.select_dtypes(include=['object', 'category']).columns if df[col].nunique() < 20]
    
    desired_cat_defaults = ['MSZoning', 'HouseStyle', 'BldgType']
    actual_cat_defaults = [col for col in desired_cat_defaults if col in cat_cols_reg]
    
    desired_num_defaults = ['GrLivArea', 'TotalBsmtSF', 'YearBuilt', 'OverallQual']
    actual_num_defaults = [col for col in desired_num_defaults if col in num_cols]

    col1, col2 = st.columns(2)
    with col1:
        vars_cont = st.multiselect(
            "*Escolha as vari√°veis cont√≠nuas (num√©ricas):*",
            options=num_cols,
            default=actual_num_defaults
        )
    with col2:
        vars_cat = st.multiselect(
            "*Escolha as vari√°veis categ√≥ricas:*",
            options=cat_cols_reg,
            default=actual_cat_defaults
        )
        
    log_transform = st.checkbox("Aplicar transforma√ß√£o logar√≠tmica em SalePrice e nas vari√°veis cont√≠nuas? (Modelo Log-Log)", value=True)

    if len(vars_cont) > 0 and len(vars_cat) > 0:
        st.markdown("---")
        st.subheader("2. Ajuste do Modelo e Diagn√≥sticos")
        
        df_model = df[['SalePrice'] + vars_cont + vars_cat].dropna()
        
        if log_transform:
            df_model['SalePrice'] = np.log1p(df_model['SalePrice'])
            for col in vars_cont:
                if np.issubdtype(df_model[col].dtype, np.number):
                    df_model[col] = np.log1p(df_model[col])

        df_model = pd.get_dummies(df_model, columns=vars_cat, drop_first=True, dtype=float)
        
        X = df_model.drop('SalePrice', axis=1)
        y = df_model['SalePrice']
        X = sm.add_constant(X)
        
        try:
            model_reg = sm.OLS(y, X).fit()
            
            col1, col2 = st.columns([1, 1])

            with col1:
                st.write("*Resumo do Modelo:*")
                st.text(model_reg.summary())
            
            with col2:
                st.write("*M√©tricas de Desempenho:*")
                y_pred = model_reg.predict(X)
                
                if log_transform:
                    y_true_orig = np.expm1(y)
                    y_pred_orig = np.expm1(y_pred)
                else:
                    y_true_orig = y
                    y_pred_orig = y_pred

                r2 = model_reg.rsquared_adj
                rmse = np.sqrt(mean_squared_error(y_true_orig, y_pred_orig))
                mae = mean_absolute_error(y_true_orig, y_pred_orig)
                
                st.metric(label="R¬≤ Ajustado", value=f"{r2:.4f}")
                st.metric(label="RMSE (Erro M√©dio Quadr√°tico)", value=f"${rmse:,.2f}")
                st.metric(label="MAE (Erro M√©dio Absoluto)", value=f"${mae:,.2f}")
                st.markdown(f"*Interpreta√ß√£o:* O modelo explica aproximadamente *{r2:.1%}* da vari√¢ncia no pre√ßo de venda. Em m√©dia, as previs√µes do modelo erram em *${mae:,.2f}* (MAE).")

            st.markdown("---")
            st.subheader("3. Diagn√≥stico dos Pressupostos")
            
            residuals_reg = model_reg.resid

            diag1, diag2 = st.columns(2)
            with diag1:
                st.markdown("*a) Normalidade dos Res√≠duos*")
                shapiro_reg = stats.shapiro(residuals_reg)
                if shapiro_reg.pvalue < 0.05:
                    st.warning(f"P-valor (Shapiro-Wilk): {shapiro_reg.pvalue:.4f}. Os res√≠duos podem n√£o ser normais.")
                else:
                    st.success(f"P-valor (Shapiro-Wilk): {shapiro_reg.pvalue:.4f}. Res√≠duos parecem normais.")
                fig = sm.qqplot(residuals_reg, line='s', fit=True)
                plt.title("Q-Q Plot dos Res√≠duos")
                st.pyplot(fig)

                st.markdown("*b) Homocedasticidade (Breusch-Pagan Test)*")
                bp_test = het_breuschpagan(residuals_reg, model_reg.model.exog)
                if bp_test[1] < 0.05:
                    st.warning(f"P-valor: {bp_test[1]:.4f}. H√° evid√™ncia de heterocedasticidade.")
                else:
                    st.success(f"P-valor: {bp_test[1]:.4f}. N√£o h√° evid√™ncia de heterocedasticidade.")
                fig, ax = plt.subplots()
                sns.scatterplot(x=model_reg.fittedvalues, y=residuals_reg, ax=ax, alpha=0.5)
                ax.axhline(0, color='red', linestyle='--')
                ax.set_xlabel("Valores Ajustados")
                ax.set_ylabel("Res√≠duos")
                ax.set_title("Res√≠duos vs. Valores Ajustados")
                st.pyplot(fig)

            with diag2:
                st.markdown("*c) Multicolinearidade (VIF)*")
                X_no_const = X.drop('const', axis=1)
                vif_data = pd.DataFrame()
                vif_data["feature"] = X_no_const.columns
                vif_data["VIF"] = [variance_inflation_factor(X_no_const.values, i) for i in range(X_no_const.shape[1])]
                st.dataframe(vif_data.style.apply(
                    lambda x: ['background-color: #FF7F7F' if v > 5 else '' for v in x], subset=['VIF']))
                st.markdown("Valores de VIF acima de 5 podem indicar multicolinearidade.")

            st.markdown("---")
            st.subheader("üí° 4. Interpreta√ß√£o dos Coeficientes e Recomenda√ß√µes Pr√°ticas")
            coef_df = pd.DataFrame({
                'Coeficiente': model_reg.params,
                'p-valor': model_reg.pvalues
            }).reset_index().rename(columns={'index': 'Vari√°vel'})
            
            coef_significativos = coef_df[(coef_df['p-valor'] < 0.05) & (coef_df['Vari√°vel'] != 'const')]
            
            if not coef_significativos.empty:
                st.markdown("As seguintes vari√°veis t√™m um impacto estatisticamente significativo no pre√ßo de venda:")
                for _, row in coef_significativos.iterrows():
                    var, coef = row['Vari√°vel'], row['Coeficiente']
                    if log_transform:
                        impacto = "aumenta" if coef > 0 else "reduz"
                        st.markdown(f"‚Ä¢ *{var}: Um aumento de 1% nesta vari√°vel, mantendo as outras constantes, *{impacto}* o pre√ßo do im√≥vel em aproximadamente *{abs(coef):.2%}**.")
                    else:
                        impacto = "aumenta" if coef > 0 else "reduz"
                        st.markdown(f"‚Ä¢ *{var}: Um aumento de uma unidade nesta vari√°vel, mantendo as outras constantes, *{impacto}* o pre√ßo do im√≥vel em *${abs(coef):,.2f}**.")
            else:
                st.warning("Nenhuma vari√°vel selecionada apresentou impacto estatisticamente significativo no pre√ßo.")
        
        except Exception as e:
            st.error(f"Erro ao ajustar o modelo de regress√£o: {e}. Verifique as vari√°veis selecionadas ou se h√° dados suficientes ap√≥s a filtragem.")
            
    else:
        st.warning("Por favor, selecione pelo menos uma vari√°vel cont√≠nua e uma categ√≥rica para a an√°lise de regress√£o.")

# --- ABA 4: SOBRE O PROJETO ---
elif aba == "üìò Sobre o Projeto":
    st.header("üìò Sobre o Projeto e Autoria")
    st.markdown("""
    Este dashboard interativo foi desenvolvido como um projeto de an√°lise de dados, com o objetivo de analisar os fatores que influenciam o pre√ßo de im√≥veis na cidade de Ames, Iowa, utilizando t√©cnicas de ANOVA e Regress√£o Linear M√∫ltipla.
    """)
    st.markdown("---")
    st.subheader("üìå Funcionalidades")
    st.markdown("""
    - ‚úîÔ∏è An√°lise de Vari√¢ncia (ANOVA) com verifica√ß√£o completa de pressupostos.
    - ‚úîÔ∏è Alternativa Robusta (Kruskal-Wallis) acionada automaticamente.
    - ‚úîÔ∏è Regress√£o Linear M√∫ltipla com op√ß√£o de transforma√ß√£o logar√≠tmica (modelo log-log).
    - ‚úîÔ∏è Diagn√≥sticos de Regress√£o: Normalidade (Shapiro-Wilk), Homocedasticidade (Breusch-Pagan) e Multicolinearidade (VIF).
    - ‚úîÔ∏è M√©tricas de Desempenho do Modelo: R¬≤, RMSE e MAE.
    - ‚úîÔ∏è Dashboard Interativo em Streamlit com filtros din√¢micos e gera√ß√£o de an√°lises em tempo real.
    """)