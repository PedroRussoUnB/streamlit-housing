import streamlit as st
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
import statsmodels.api as sm
from statsmodels.formula.api import ols
from scipy import stats
from statsmodels.stats.outliers_influence import variance_inflation_factor
from statsmodels.stats.diagnostic import het_breuschpagan
from sklearn.metrics import mean_squared_error, mean_absolute_error
import warnings

# Ignorar avisos que podem poluir o dashboard
warnings.filterwarnings("ignore")
st.set_page_config(page_title="An√°lise Imobili√°ria - Ames", layout="wide")

header_html = """
<style>
    #app-header {
        position: fixed;
        top: 0;
        left: 0;
        right: 0;
        background-color: #0f1116; 
        color: #fafafa;          
        padding: 10px 25px;
        z-index: 999;             
        border-bottom: 1px solid #31333f;
        text-align: center;
    }
    #app-header h2 {
        margin: 0;
        font-size: 26px;
        font-weight: 600;
    }
    #app-header p {
        margin: 5px 0 0 0;
        font-size: 16px;
        color: #a3a3a3; 
    }
    .main .block-container {
        padding-top: 7rem; 
    }
</style>

<div id="app-header">
    <h2>üè° An√°lise de Dados Imobili√°rios: Ames, Iowa</h2>
    <p>Integrantes: Pedro Russo e Daniel Vianna</p>
</div>
"""
st.markdown(header_html, unsafe_allow_html=True)

# --- CARREGAMENTO E CACHE DOS DADOS ---
@st.cache_data
def load_data():
    """Carrega e faz um pr√©-processamento leve nos dados."""
    df_loaded = pd.read_csv("AmesHousing.csv") # Use um nome diferente para evitar conflito
    df_loaded.columns = df_loaded.columns.str.replace(' ', '')
    
    numeric_cols_to_impute = ['MasVnrArea', 'BsmtFinSF1', 'TotalBsmtSF', 'GarageCars', 'OverallQual']
    for col in numeric_cols_to_impute:
        if col in df_loaded.columns:
            df_loaded[col].fillna(df_loaded[col].median(), inplace=True)
            
    categorical_cols_to_impute = ['BsmtQual', 'FireplaceQu', 'GarageType', 'MSZoning', 'HouseStyle', 'BldgType']
    for col in categorical_cols_to_impute:
         if col in df_loaded.columns:
            df_loaded[col].fillna(df_loaded[col].mode()[0], inplace=True)
    return df_loaded

df_original = load_data()

# --- BARRA LATERAL DE NAVEGA√á√ÉO E FILTROS ---
st.sidebar.title("Navega√ß√£o")
aba = st.sidebar.radio("Selecione a An√°lise:", ["üìä Vis√£o Geral", "üìà Etapa I ‚Äì ANOVA", "üìâ Etapa II ‚Äì Regress√£o", "üìò Sobre o Projeto"])

st.sidebar.markdown("---")
st.sidebar.header("Filtros Gerais")
st.sidebar.markdown("Filtre os dados para refinar as an√°lises em todas as abas.")

# Certificar que OverallQual existe e tem valores √∫nicos antes de usar no filtro
if 'OverallQual' in df_original.columns and not df_original['OverallQual'].empty:
    overall_qual_options = sorted(df_original['OverallQual'].unique())
    default_overall_qual = overall_qual_options
else:
    overall_qual_options = [0] # Placeholder
    default_overall_qual = [0] # Placeholder

qualidade_geral = st.sidebar.multiselect(
    'Filtre por Qualidade Geral do Im√≥vel:',
    options=overall_qual_options,
    default=default_overall_qual
)

if 'YearBuilt' in df_original.columns and not df_original['YearBuilt'].empty:
    ano_min_orig, ano_max_orig = int(df_original['YearBuilt'].min()), int(df_original['YearBuilt'].max())
else:
    ano_min_orig, ano_max_orig = 1900, 2020 # Placeholders

ano_range = st.sidebar.slider(
    'Filtre por Ano de Constru√ß√£o:',
    min_value=ano_min_orig,
    max_value=ano_max_orig,
    value=(ano_min_orig, ano_max_orig)
)

# Aplicar filtros ao DataFrame
# Renomeia a vari√°vel 'df' aqui para 'df_filtered' para clareza
df_filtered = df_original.copy() # Come√ßa com uma c√≥pia do original
if 'OverallQual' in df_filtered.columns:
    df_filtered = df_filtered[df_filtered['OverallQual'].isin(qualidade_geral)]
if 'YearBuilt' in df_filtered.columns:
    df_filtered = df_filtered[
        (df_filtered['YearBuilt'] >= ano_range[0]) &
        (df_filtered['YearBuilt'] <= ano_range[1])
    ]


# --- ABA 1: VIS√ÉO GERAL ---
if aba == "üìä Vis√£o Geral":
    st.header("üìä Vis√£o Geral dos Dados de Im√≥veis")
    st.markdown(f"Exibindo *{df_filtered.shape[0]}* de *{df_original.shape[0]}* im√≥veis ap√≥s a aplica√ß√£o dos filtros.")
    
    if not df_filtered.empty:
        col1, col2 = st.columns(2)
        with col1:
            st.subheader("Distribui√ß√£o do Pre√ßo de Venda (SalePrice)")
            fig, ax = plt.subplots()
            sns.histplot(df_filtered['SalePrice'], kde=True, ax=ax)
            ax.set_title("Distribui√ß√£o do Pre√ßo de Venda")
            ax.set_xlabel("Pre√ßo de Venda ($)")
            ax.set_ylabel("Frequ√™ncia")
            st.pyplot(fig)

        with col2:
            st.subheader("Pre√ßo de Venda vs. √Årea Constru√≠da")
            fig, ax = plt.subplots()
            sns.scatterplot(data=df_filtered, x='GrLivArea', y='SalePrice', alpha=0.5, ax=ax)
            ax.set_title("Pre√ßo de Venda vs. √Årea de Estar (GrLivArea)")
            ax.set_xlabel("√Årea de Estar (P√©s Quadrados)")
            ax.set_ylabel("Pre√ßo de Venda ($)")
            st.pyplot(fig)
            
        st.subheader("Amostra dos Dados")
        st.dataframe(df_filtered.head())
    else:
        st.warning("Nenhum dado dispon√≠vel ap√≥s a aplica√ß√£o dos filtros.")


# --- ABA 2: ANOVA ---
elif aba == "üìà Etapa I ‚Äì ANOVA":
    st.header("üìà An√°lise de Vari√¢ncia (ANOVA)")
    st.markdown("""
    *Objetivo:* Verificar se existe uma diferen√ßa estatisticamente significativa no pre√ßo m√©dio de venda (SalePrice) 
    entre diferentes categorias de uma vari√°vel escolhida. O usu√°rio deve selecionar de 2 a 3 vari√°veis sequencialmente para an√°lise.
    """)

    # Sele√ß√£o de vari√°veis
    cat_cols_anova = [col for col in df_filtered.select_dtypes(include=['object', 'category']).columns if df_filtered[col].nunique() < 10 and df_filtered[col].nunique() > 1]
    
    if not cat_cols_anova:
        st.warning("N√£o h√° vari√°veis categ√≥ricas adequadas para ANOVA ap√≥s os filtros aplicados (precisa > 1 e < 10 categorias √∫nicas).")
    else:
        default_anova_var = 'BldgType' if 'BldgType' in cat_cols_anova else cat_cols_anova[0]
        var_cat = st.selectbox(
            "*1. Escolha a vari√°vel categ√≥rica para an√°lise:*",
            options=cat_cols_anova,
            index=cat_cols_anova.index(default_anova_var),
            help="A ANOVA de fator √∫nico compara o pre√ßo m√©dio entre os grupos de UMA vari√°vel por vez."
        )

        if var_cat and not df_filtered.empty:
            st.markdown("---")
            st.subheader(f"An√°lise de 'SalePrice' por '{var_cat}'")

            # Visualiza√ß√£o: Boxplot
            st.write("*Visualiza√ß√£o da Distribui√ß√£o:*")
            fig, ax = plt.subplots(figsize=(12, 6))
            sns.boxplot(data=df_filtered, x=var_cat, y='SalePrice', ax=ax)
            ax.set_title(f"Distribui√ß√£o do Pre√ßo de Venda por {var_cat}")
            ax.set_xlabel(var_cat)
            ax.set_ylabel("Pre√ßo de Venda ($)")
            plt.xticks(rotation=45)
            st.pyplot(fig)
            
            st.markdown("---")
            st.subheader("2. Verifica√ß√£o dos Pressupostos da ANOVA")

            # Remover NaNs para o modelo ANOVA especificamente
            df_anova_current = df_filtered[[var_cat, 'SalePrice']].dropna()

            if df_anova_current.empty or df_anova_current[var_cat].nunique() < 2:
                st.error(f"N√£o h√° dados suficientes ou categorias suficientes para '{var_cat}' ap√≥s remover NaNs para realizar a ANOVA.")
            else:
                formula = f"SalePrice ~ C({var_cat})"
                try:
                    model_anova = ols(formula, data=df_anova_current).fit()
                    residuals = model_anova.resid
                except Exception as e:
                    st.error(f"N√£o foi poss√≠vel ajustar o modelo para os res√≠duos. Erro: {e}")
                    st.stop()
                
                # a) Pressuposto de Normalidade dos Res√≠duos (Shapiro-Wilk)
                st.markdown("*a) Normalidade dos Res√≠duos*")
                if len(residuals) > 2: # Shapiro-Wilk precisa de pelo menos 3 amostras
                    shapiro_test = stats.shapiro(residuals)
                    p_valor_shapiro = shapiro_test.pvalue
                    if p_valor_shapiro < 0.05:
                        st.warning(f"*Pressuposto violado:* Os res√≠duos *n√£o* seguem uma distribui√ß√£o normal (p-valor do teste de Shapiro-Wilk = {p_valor_shapiro:.4f}).")
                    else:
                        st.success(f"*Pressuposto atendido:* Os res√≠duos parecem seguir uma distribui√ß√£o normal (p-valor do teste de Shapiro-Wilk = {p_valor_shapiro:.4f}).")
                    
                    fig_qq = sm.qqplot(residuals, line='s', fit=True)
                    plt.title("Gr√°fico Q-Q dos Res√≠duos")
                    st.pyplot(fig_qq)
                else:
                    st.warning("N√£o h√° res√≠duos suficientes para o teste de Shapiro-Wilk.")
                    p_valor_shapiro = 0 # Assume violado para for√ßar Kruskal-Wallis

                # b) Pressuposto de Homocedasticidade (Teste de Levene)
                st.markdown("*b) Homocedasticidade*")
                groups = [df_anova_current['SalePrice'][df_anova_current[var_cat] == g] for g in df_anova_current[var_cat].unique()]
                groups_for_levene = [g for g in groups if len(g) > 1] # Levene precisa de grupos com >1 amostra
                
                if len(groups_for_levene) > 1: # Levene precisa de pelo menos 2 grupos
                    levene_test = stats.levene(*groups_for_levene)
                    p_valor_levene = levene_test.pvalue
                    if p_valor_levene < 0.05:
                        st.warning(f"*Pressuposto violado:* As vari√¢ncias *n√£o* s√£o homog√™neas entre os grupos (p-valor do teste de Levene = {p_valor_levene:.4f}).")
                    else:
                        st.success(f"*Pressuposto atendido:* As vari√¢ncias s√£o homog√™neas entre os grupos (p-valor do teste de Levene = {p_valor_levene:.4f}).")
                else:
                    st.warning("N√£o h√° grupos suficientes para realizar o teste de Levene.")
                    p_valor_levene = 0 # Assume violado

                st.markdown("---")
                st.subheader("3. Resultados do Teste Estat√≠stico e Interpreta√ß√£o")
                
                # Decis√£o sobre qual teste usar
                if p_valor_shapiro >= 0.05 and p_valor_levene >= 0.05:
                    st.info("*Teste Aplicado: ANOVA* (pois os pressupostos foram atendidos).")
                    anova_table = sm.stats.anova_lm(model_anova, typ=2)
                    st.write("Tabela ANOVA:")
                    st.dataframe(anova_table)
                    p_valor_final = anova_table.iloc[0]['PR(>F)']
                    if p_valor_final < 0.05:
                        st.success(f"*Conclus√£o (ANOVA):* Existe uma diferen√ßa estatisticamente significativa nos pre√ßos m√©dios de venda entre as diferentes categorias de '{var_cat}' (p-valor = {p_valor_final:.4f}). Categorias com m√©dias mais altas podem indicar maior valoriza√ß√£o.")
                    else:
                        st.warning(f"*Conclus√£o (ANOVA):* N√£o h√° evid√™ncia de uma diferen√ßa estatisticamente significativa nos pre√ßos m√©dios de venda para '{var_cat}' (p-valor = {p_valor_final:.4f}).")

                else:
                    st.info("*Teste Aplicado: Kruskal-Wallis* (alternativa n√£o param√©trica, pois um ou mais pressupostos da ANOVA foram violados).")
                    if len(groups) > 1 : # Kruskal-Wallis precisa de pelo menos 2 grupos
                        kruskal_test = stats.kruskal(*groups)
                        p_valor_kruskal = kruskal_test.pvalue
                        st.write(f"*Estat√≠stica H (Kruskal-Wallis):* {kruskal_test.statistic:.4f}")
                        st.write(f"*P-valor:* {p_valor_kruskal:.4f}")
                        if p_valor_kruskal < 0.05:
                            st.success(f"*Conclus√£o (Kruskal-Wallis):* Existe uma diferen√ßa estatisticamente significativa nas distribui√ß√µes de pre√ßo de venda entre as diferentes categorias de '{var_cat}' (p-valor = {p_valor_kruskal:.4f}). Isso sugere que '{var_cat}' influencia o pre√ßo.")
                        else:
                            st.warning(f"*Conclus√£o (Kruskal-Wallis):* N√£o h√° evid√™ncia de uma diferen√ßa significativa nas distribui√ß√µes de pre√ßo para '{var_cat}' (p-valor = {p_valor_kruskal:.4f}).")
                    else:
                        st.error("N√£o foi poss√≠vel realizar o teste de Kruskal-Wallis devido ao n√∫mero insuficiente de grupos.")
                
                st.markdown(f"*Orienta√ß√£o para Corretores/Investidores:* Se '{var_cat}' mostrou impacto significativo, foque nas categorias de maior valor para maximizar retornos ou comiss√µes. Se n√£o, esta caracter√≠stica pode n√£o ser um diferencial de pre√ßo prim√°rio.")
        elif df_filtered.empty:
            st.warning("Nenhum dado dispon√≠vel ap√≥s a aplica√ß√£o dos filtros para realizar a ANOVA.")


# --- ABA 3: REGRESS√ÉO LINEAR ---
elif aba == "üìâ Etapa II ‚Äì Regress√£o":
    st.header("üìâ Modelagem Preditiva com Regress√£o Linear")
    st.markdown("""
    *Objetivo:* Construir um modelo para prever o SalePrice com base em m√∫ltiplas caracter√≠sticas do im√≥vel (4 a 6 vari√°veis, com pelo menos 1 cont√≠nua e 1 categ√≥rica).
    """)

    if df_filtered.empty:
        st.warning("Nenhum dado dispon√≠vel ap√≥s a aplica√ß√£o dos filtros para a Regress√£o Linear.")
    else:
        st.subheader("1. Sele√ß√£o de Vari√°veis e Transforma√ß√£o")
        
        num_cols_reg = df_filtered.select_dtypes(include=np.number).columns.tolist()
        # Remover 'PID' e 'SalePrice' das op√ß√µes de vari√°veis explicativas num√©ricas
        num_cols_reg = [col for col in num_cols_reg if col not in ['PID', 'SalePrice', 'Id']]

        cat_cols_reg = [col for col in df_filtered.select_dtypes(include=['object', 'category']).columns if df_filtered[col].nunique() < 20 and df_filtered[col].nunique() > 1]
        
        # Garantir que as colunas padr√£o existam e sejam v√°lidas
        desired_cat_defaults = ['MSZoning', 'HouseStyle', 'BldgType']
        actual_cat_defaults = [col for col in desired_cat_defaults if col in cat_cols_reg]
        
        desired_num_defaults = ['GrLivArea', 'TotalBsmtSF', 'YearBuilt', 'OverallQual']
        actual_num_defaults = [col for col in desired_num_defaults if col in num_cols_reg]

        col1_reg, col2_reg = st.columns(2)
        with col1_reg:
            vars_cont = st.multiselect(
                "*Escolha vari√°veis cont√≠nuas (num√©ricas) (1 ou mais):*",
                options=num_cols_reg,
                default=actual_num_defaults
            )
        with col2_reg:
            vars_cat_reg = st.multiselect( # Renomeado para vars_cat_reg para evitar conflito com a ANOVA
                "*Escolha vari√°veis categ√≥ricas (1 ou mais):*",
                options=cat_cols_reg,
                default=actual_cat_defaults
            )
            
        log_transform = st.checkbox("Aplicar transforma√ß√£o logar√≠tmica em SalePrice e nas vari√°veis cont√≠nuas? (Modelo Log-Log)", value=True)

        if len(vars_cont) >= 1 and len(vars_cat_reg) >= 1 and (len(vars_cont) + len(vars_cat_reg)) >= 4 and (len(vars_cont) + len(vars_cat_reg)) <= 6 :
            st.markdown("---")
            st.subheader("2. Ajuste do Modelo e Resultados")
            
            # Prepara√ß√£o dos dados para o modelo
            cols_for_model = ['SalePrice'] + vars_cont + vars_cat_reg
            df_model = df_filtered[cols_for_model].copy().dropna() # Usar c√≥pia e tratar NaNs

            if df_model.shape[0] < (len(vars_cont) + df_model.nunique().sum() + 1): # Heur√≠stica para dados suficientes
                 st.error(f"Dados insuficientes ({df_model.shape[0]} linhas) para o n√∫mero de preditores ap√≥s tratar NaNs. Tente outros filtros ou vari√°veis.")
            else:
                y = df_model['SalePrice']
                X_vars = df_model[vars_cont + vars_cat_reg]

                # Transforma√ß√£o logar√≠tmica
                if log_transform:
                    y = np.log1p(y)
                    for col in vars_cont:
                        if pd.api.types.is_numeric_dtype(X_vars[col]):
                             # Adicionar pequeno valor para evitar log(0) se houver zeros e a coluna for estritamente positiva
                            if (X_vars[col] >= 0).all():
                                X_vars[col] = np.log1p(X_vars[col])
                            else: # Se pode ter negativos, n√£o transformar ou usar outra estrat√©gia
                                st.warning(f"Vari√°vel {col} n√£o transformada com log1p pois cont√©m valores negativos.")


                # Vari√°veis dummy para categ√≥ricas
                X_vars = pd.get_dummies(X_vars, columns=vars_cat_reg, drop_first=True, dtype=float)
                X_vars = sm.add_constant(X_vars) # Adicionar intercepto
                
                try:
                    model_reg = sm.OLS(y, X_vars).fit()
                    
                    st.write("*Resumo do Modelo (Statsmodels OLS):*")
                    st.text(model_reg.summary())
                
                    st.markdown("---")
                    st.subheader("3. M√©tricas de Desempenho do Modelo")
                    y_pred = model_reg.predict(X_vars)
                    
                    # Reverter o log para calcular o erro na escala original se a transforma√ß√£o foi aplicada
                    if log_transform:
                        y_true_orig = np.expm1(y)
                        y_pred_orig = np.expm1(y_pred)
                        # Tratar poss√≠veis NaNs ou Inf em y_pred_orig se expm1 resultar em valores muito grandes
                        y_pred_orig = np.nan_to_num(y_pred_orig, nan=np.nanmedian(y_pred_orig), posinf=np.nanmax(y_true_orig[np.isfinite(y_true_orig)]))

                    else:
                        y_true_orig = y
                        y_pred_orig = y_pred

                    r2_adj = model_reg.rsquared_adj
                    rmse = np.sqrt(mean_squared_error(y_true_orig, y_pred_orig))
                    mae = mean_absolute_error(y_true_orig, y_pred_orig)
                    
                    m1, m2, m3 = st.columns(3)
                    m1.metric(label="R¬≤ Ajustado", value=f"{r2_adj:.4f}")
                    m2.metric(label="RMSE (Erro M√©dio Quadr√°tico)", value=f"<span class="math-inline">\{rmse\:,\.2f\}"\)
m3\.metric\(label\="MAE \(Erro M√©dio Absoluto\)", value\=f"</span>{mae:,.2f}")
                    st.markdown(f"*Discuss√£o do Ajuste:* O modelo explica aproximadamente *{r2_adj:.1%}* da vari√¢ncia no pre√ßo de venda (transformado, se aplic√°vel). O MAE indica que, em m√©dia, as previs√µes do modelo (na escala original) erram em *<span class="math-inline">\{mae\:,\.2f\}\\*\."\)
st\.markdown\("\-\-\-"\)
st\.subheader\("4\. Diagn√≥stico dos Pressupostos do Modelo"\)
residuals\_reg \= model\_reg\.resid
diag1, diag2 \= st\.columns\(2\)
with diag1\:
\# a\) Linearidade e Homocedasticidade \(Visual\)
st\.markdown\("\\*a\) Linearidade e Homocedasticidade \(Visual\)\\*"\)
fig\_res\_fit, ax\_res\_fit \= plt\.subplots\(\)
sns\.scatterplot\(x\=model\_reg\.fittedvalues, y\=residuals\_reg, ax\=ax\_res\_fit, alpha\=0\.5\)
ax\_res\_fit\.axhline\(0, color\='red', linestyle\='\-\-'\)
ax\_res\_fit\.set\_xlabel\("Valores Ajustados"\)
ax\_res\_fit\.set\_ylabel\("Res√≠duos"\)
ax\_res\_fit\.set\_title\("Res√≠duos vs\. Valores Ajustados"\)
st\.pyplot\(fig\_res\_fit\)
st\.caption\("Ideal\: Pontos aleatoriamente dispersos em torno da linha horizontal em 0, sem padr√µes claros \(funil, curva\)\."\)
\# b\) Normalidade dos Res√≠duos \(Shapiro\-Wilk\)
st\.markdown\("\\*b\) Normalidade dos Res√≠duos\\*"\)
if len\(residuals\_reg\) \> 2\:
shapiro\_reg\_test \= stats\.shapiro\(residuals\_reg\)
if shapiro\_reg\_test\.pvalue < 0\.05\:
st\.warning\(f"P\-valor \(Shapiro\-Wilk\)\: \{shapiro\_reg\_test\.pvalue\:\.4f\}\. Os res√≠duos podem n√£o ser normais\."\)
else\:
st\.success\(f"P\-valor \(Shapiro\-Wilk\)\: \{shapiro\_reg\_test\.pvalue\:\.4f\}\. Res√≠duos parecem normais\."\)
fig\_qq\_reg \= sm\.qqplot\(residuals\_reg, line\='s', fit\=True\)
plt\.title\("Q\-Q Plot dos Res√≠duos \(Regress√£o\)"\)
st\.pyplot\(fig\_qq\_reg\)
else\:
st\.warning\("N√£o h√° res√≠duos suficientes para o teste de Shapiro\-Wilk na regress√£o\."\)
with diag2\:
\# c\) Homocedasticidade \(Teste de Breusch\-Pagan\)
st\.markdown\("\\*c\) Homocedasticidade \(Teste Quantitativo\)\\*"\)
try\:
bp\_test \= het\_breuschpagan\(residuals\_reg, model\_reg\.model\.exog\)
if bp\_test\[1\] < 0\.05\: \# p\-valor do teste F
st\.warning\(f"P\-valor \(Breusch\-Pagan\)\: \{bp\_test\[1\]\:\.4f\}\. H√° evid√™ncia de heterocedasticidade \(vari√¢ncia n√£o constante dos res√≠duos\)\."\)
else\:
st\.success\(f"P\-valor \(Breusch\-Pagan\)\: \{bp\_test\[1\]\:\.4f\}\. N√£o h√° evid√™ncia significativa de heterocedasticidade\."\)
except Exception as e\_bp\:
st\.warning\(f"N√£o foi poss√≠vel rodar o teste de Breusch\-Pagan\: \{e\_bp\}"\)
\# d\) Multicolinearidade \(VIF\)
st\.markdown\("\\*d\) Multicolinearidade \(VIF\)\\*"\)
X\_vif \= X\_vars\.drop\('const', axis\=1, errors\='ignore'\) \# Remover constante para VIF
if not X\_vif\.empty\:
vif\_data \= pd\.DataFrame\(\)
vif\_data\["Vari√°vel"\] \= X\_vif\.columns
vif\_data\["VIF"\] \= \[variance\_inflation\_factor\(X\_vif\.values, i\) for i in range\(X\_vif\.shape\[1\]\)\]
st\.dataframe\(vif\_data\[vif\_data\['VIF'\] \> 0\]\.style\.apply\( \# Mostrar apenas VIFs positivos
lambda x\: \['background\-color\: \#FF7F7F' if v \> 5 else '' for v in x\], subset\=\['VIF'\]\)\)
st\.caption\("VIF \> 5 pode indicar multicolinearidade\. VIF \> 10 √© geralmente problem√°tico\. Considere remover vari√°veis com VIF alto se os pressupostos forem afetados\."\)
else\:
st\.info\("Nenhuma vari√°vel para calcular VIF \(ap√≥s remover constante\)\."\)
st\.markdown\("\-\-\-"\)
st\.subheader\("5\. Interpreta√ß√£o dos Coeficientes e Recomenda√ß√µes Pr√°ticas"\)
coef\_df \= pd\.DataFrame\(\{
'Coeficiente'\: model\_reg\.params,
'Erro Padr√£o'\: model\_reg\.bse,
'p\-valor'\: model\_reg\.pvalues
\}\)\.reset\_index\(\)\.rename\(columns\=\{'index'\: 'Vari√°vel'\}\)
st\.write\("Coeficientes do Modelo\:"\)
st\.dataframe\(coef\_df\)
coef\_significativos \= coef\_df\[\(coef\_df\['p\-valor'\] < 0\.05\) & \(coef\_df\['Vari√°vel'\] \!\= 'const'\)\]
if not coef\_significativos\.empty\:
st\.markdown\("\\*Recomenda√ß√µes e Insights \(baseado em vari√°veis com p\-valor < 0\.05\)\:\\*"\)
for \_, row in coef\_significativos\.iterrows\(\)\:
var, coef\_val \= row\['Vari√°vel'\], row\['Coeficiente'\]
\# Ajustar a interpreta√ß√£o para dummies \(se o nome da vari√°vel cont√©m o nome de uma das vars\_cat\_reg originais\)
original\_cat\_var\_name \= next\(\(cat\_var for cat\_var in vars\_cat\_reg if cat\_var in var\), None\)
if log\_transform\:
impacto\_desc \= "aumenta" if coef\_val \> 0 else "reduz"
if original\_cat\_var\_name\: \# √â uma dummy de uma vari√°vel categ√≥rica original
st\.markdown\(f"‚Ä¢ Ser da categoria \\'\{var\.replace\(original\cat\_var\_name \+ '\', ''\)\}'\\ \(da vari√°vel '\{original\_cat\_var\_name\}'\), em compara√ß√£o com a categoria base, \\\{impacto\_desc\}\\ o pre√ßo do im√≥vel em aproximadamente \\\{abs\(coef\_val\)\:\.2%\}\\, mantendo outras vari√°veis constantes\."\)
elif var in vars\_cont\: \# √â uma vari√°vel cont√≠nua transformada
st\.markdown\(f"‚Ä¢ Um aumento de 1% em \\'\{var\}'\\, mantendo outras vari√°veis constantes, \\\{impacto\_desc\}\\ o pre√ßo do im√≥vel em aproximadamente \\\{abs\(coef\_val\)\:\.2%\}\\\."\)
else\: \# Caso geral \(pode ser uma dummy n√£o pega pela l√≥gica acima\)
st\.markdown\(f"‚Ä¢ \\\{var\}\\\: Impacto de elasticidade de \\\{coef\_val\:\.2f\}\\\. Um aumento de 1% est√° associado a uma mudan√ßa de \{coef\_val\:\.2%\} no pre√ßo\."\)
else\: \# Modelo linear \(n√£o log\-log\)
impacto\_desc \= "aumenta" if coef\_val \> 0 else "reduz"
if original\_cat\_var\_name\:
st\.markdown\(f"‚Ä¢ Ser da categoria \\'\{var\.replace\(original\cat\_var\_name \+ '\', ''\)\}'\\ \(da vari√°vel '\{original\_cat\_var\_name\}'\), em compara√ß√£o com a categoria base, \\\{impacto\_desc\}\\ o pre√ßo do im√≥vel em \\</span>{abs(coef_val):,.0f}**, mantendo outras vari√°veis constantes.")
                                elif var in vars_cont:
                                    st.markdown(f"‚Ä¢ Um aumento de uma unidade em *'{var}', mantendo outras vari√°veis constantes, *{impacto_desc}* o pre√ßo do im√≥vel em *<span class="math-inline">\{abs\(coef\_val\)\:,\.0f\}\\\."\)
else\:
st\.markdown\(f"‚Ä¢ \\\{var\}\\\: Impacto de \\</span>{coef_val:,.0f}** no pre√ßo para cada unidade de aumento.")
                        st.caption("Interpreta√ß√µes de vari√°veis dummy s√£o relativas √† categoria base omitida. A transforma√ß√£o logar√≠tmica permite interpreta√ß√£o percentual.")
                    else:
                        st.warning("Nenhuma vari√°vel selecionada apresentou impacto estatisticamente significativo no pre√ßo (com p-valor < 0.05).")
                
                except Exception as e_reg:
                    st.error(f"Erro ao ajustar o modelo de regress√£o ou em seus diagn√≥sticos: {e_reg}")
        elif not ((len(vars_cont) + len(vars_cat_reg)) >= 4 and (len(vars_cont) + len(vars_cat_reg)) <= 6):
             st.warning("Por favor, selecione um total de 4 a 6 vari√°veis explicativas (entre cont√≠nuas e categ√≥ricas).")
        else:
            st.warning("Por favor, selecione pelo menos uma vari√°vel cont√≠nua e uma categ√≥rica para a an√°lise de regress√£o.")


# --- ABA 4: SOBRE O PROJETO ---
elif aba == "üìò Sobre o Projeto":
    st.header("üìò Sobre o Projeto e Autoria")
    st.markdown("""
    Este dashboard interativo foi desenvolvido como parte da disciplina de Estat√≠stica Aplicada, com o objetivo de analisar os fatores que influenciam o pre√ßo de im√≥veis na cidade de Ames, Iowa, utilizando t√©cnicas de ANOVA e Regress√£o Linear M√∫ltipla.
    O projeto permite a explora√ß√£o din√¢mica dos dados, verifica√ß√£o de pressupostos estat√≠sticos e gera√ß√£o de insights pr√°ticos para o mercado imobili√°rio.
    
    *Autores:* Pedro Russo e Daniel Vianna
    """)
    
    st.markdown("---")
    st.subheader("üìå Funcionalidades e Requisitos Atendidos")
    st.markdown("""
    - ‚úîÔ∏è *An√°lise Explorat√≥ria e Comparativa com ANOVA (Etapa I)*:
        - Sele√ß√£o de 2-3 vari√°veis categ√≥ricas (sequencialmente).
        - Aplica√ß√£o de ANOVA.
        - Verifica√ß√£o de pressupostos: Normalidade dos Res√≠duos (Shapiro-Wilk, Gr√°fico Q-Q) e Homocedasticidade (Teste de Levene).
        - Abordagem robusta (Kruskal-Wallis) se pressupostos n√£o atendidos.
        - Interpreta√ß√£o dos resultados para tomada de decis√£o.
    - ‚úîÔ∏è *Modelagem Preditiva com Regress√£o Linear (Etapa II)*:
        - Sele√ß√£o de 4-6 vari√°veis explicativas (‚â•1 cont√≠nua, ‚â•1 categ√≥rica com dummies).
        - Regress√£o Linear M√∫ltipla (sem intera√ß√µes).
        - Op√ß√£o de transforma√ß√£o logar√≠tmica (modelo log-log) na dependente e cont√≠nuas.
        - Diagn√≥stico dos pressupostos: Linearidade (visual com res√≠duos vs. ajustados), Normalidade (Shapiro-Wilk, Q-Q plot), Homocedasticidade (Breusch-Pagan, visual), Multicolinearidade (VIF).
        - M√©tricas de desempenho: R¬≤ Ajustado, RMSE, MAE, com discuss√£o.
        - Interpreta√ß√£o detalhada dos coeficientes (incluindo contexto log-log e signific√¢ncia).
        - Recomenda√ß√µes pr√°ticas baseadas no modelo.
    - ‚úîÔ∏è *B√¥nus de Inova√ß√£o*:
        - Dashboard interativo em Streamlit.
        - Visualiza√ß√£o de dados.
        - Execu√ß√£o din√¢mica de an√°lises com filtros.
        - Exibi√ß√£o de gr√°ficos, diagn√≥sticos e interpreta√ß√µes diretamente no app.
    """)